
    def seleccionar_archivo_verificador(self):
        if self.archivo_principal_text.get():
            try:
                archivo = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
                if archivo:
                    self.archivo_validador_text.delete(0, END)  # Borrar texto previo
                    self.archivo_validador_text.insert(0, archivo)  # Rellenar con la ruta seleccionada
                    self.archivo_validador_seleccionado = archivo  # Guardar la ruta seleccionada en una variable global
                    self.df_datos = leer_archivo_verificador(self.archivo_validador_seleccionado, self.df_datos)
            except:
                self.archivo_validador_text.delete(0, END)
                messagebox.showerror("Error", "Error al abrir el archivo. Seleccione un archivo del validador.")
        else:
            messagebox.showinfo("Error", "Seleccione primero el archivo csv de Grafana.")
            
    def seleccionar_archivo_inumet(self):
        if self.archivo_principal_text.get():
            try:
                archivo = filedialog.askopenfilename(filetypes=[("CSV Files", "*.csv")])
                if archivo:
                    self.archivo_inumet_text.delete(0, END)  # Borrar texto previo
                    self.archivo_inumet_text.insert(0, archivo)  # Rellenar con la ruta seleccionada
                    self.archivo_inumet_seleccionado = archivo  # Guardar la ruta seleccionada en una variable global
                    
                    df_instantaneo = calcular_instantaneos(self.df_datos)
                    df_acumulados_diarios = calcular_acumulados_diarios(df_instantaneo)
                    verificador = leer_archivo_inumet(self.archivo_inumet_seleccionado, df_acumulados_diarios)
                    
                    self.habilitar_boton_comenzar()
            except:
                    self.archivo_inumet_text.delete(0, END)
                    messagebox.showerror("Error", "Error al abrir el archivo. Seleccione un archivo de INUMET valido.\n\nRecuerde que el archivo csv de INUMET debe construirse de la siguiente forma:\n\n- Nombre columnas: FECHA | INUMET\n- Formato columnas: dd/mm/aaaa | valor precipitacion(mm)")
        else:
            messagebox.showinfo("Error", "Seleccione primero el archivo csv de Grafana.")

    def iniciar_ventanas(self):
        self.checkbox_inicio = True
                                            
        self.df_config = cargar_config()
        self.df_config = agregar_equipos_nuevos_config(self.df_config, self.df_datos)
        self.df_config= eliminar_lugares_no_existentes_config(self.df_config, self.df_datos)
        
        if detectar_id_faltante_config(self.df_config) or self.checkbox_config_bool:
            self.checkbox_config.set(False)
            self.actualizar_checkbox_config()
            self.cerrar_ventana()
            Config(self)
        else:
            self.df_datos = actualizar_columnas_datos_config(self.df_config, self.df_datos)
            self.df_datos_original = self.df_datos
            
        if self.archivo_inumet_text.get():
            df_instantaneo = calcular_instantaneos(self.df_datos)
            self.df_acumulados_diarios = calcular_acumulados_diarios(df_instantaneo)
            self.df_acumulados_diarios = leer_archivo_inumet(self.archivo_inumet_seleccionado, self.df_acumulados_diarios)
        
            
            if self.analisis_seleccionado.get()== "Tormenta":
                self.cerrar_ventana()
                return VentanaLimiteTemporal(self)
            
            if self.analisis_seleccionado.get()=="Mensual":             
                self.cerrar_ventana()
                return VentanaPrincipalMensual(self)


    def mostrar_acumulados_totales(self):
        tk.Label(self.info_frame, text="Acumulados totales:", font=("Arial", 10, "bold")).pack(pady=5)

        # Crear un Frame para contener tanto el Treeview como el botón
        frame_contenedor = tk.Frame(self.info_frame)
        frame_contenedor.pack(fill="both", expand=True)

        # Crear un Frame para el botón
        frame_boton = tk.Frame(frame_contenedor)
        frame_boton.pack(side="left")

        # Crear un botón en el frame_boton
        copiar_btn = tk.Button(frame_boton, text="Copiar", command=self.copiar_tabla_acumulado_al_portapapeles)
        copiar_btn.pack(side="left")
        
        # Crear un Frame para la tabla (Treeview)
        frame_tabla_acumulado_total = tk.Frame(frame_contenedor)
        frame_tabla_acumulado_total.pack(side="right", fill="both", expand=True, padx=10)
        
        # Crear un Treeview con columnas dinámicas
        self.tabla_acumulado_total = ttk.Treeview(frame_tabla_acumulado_total, show="headings", height=1)
        
        if self.checkbox_inicio:
            df_acumulados_filtrado = self.df_acumulados[self.pluvio_validos]
        else:   
            # Agregar columnas
            df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(self.df_acumulados)
        
        self.df_acumulados_total = acumulado_total(df_acumulados_filtrado)
        self.df_acumulados_total = self.df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = self.df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in self.df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in self.df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())

        # Crear un Scrollbar horizontal
        scrollbar = tk.Scrollbar(frame_tabla_acumulado_total, orient="horizontal", command=self.tabla_acumulado_total.xview)
        self.tabla_acumulado_total.config(xscrollcommand=scrollbar.set)
        scrollbar.pack(side="bottom", fill="x")

        # Crear un Scrollbar vertical (opcional, si hay muchas filas)
        scrollbar_vertical = tk.Scrollbar(frame_tabla_acumulado_total, orient="vertical", command=self.tabla_acumulado_total.yview)
        self.tabla_acumulado_total.config(yscrollcommand=scrollbar_vertical.set)
        scrollbar_vertical.pack(side="right", fill="y")

        # Empaquetar el Treeview
        self.tabla_acumulado_total.pack(fill="both", expand=True)

    def actualizar_acumulado_total(self):
        # Elimina todos los elementos existentes
        for item in self.tabla_acumulado_total.get_children():
            self.tabla_acumulado_total.delete(item)
        df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(self.df_acumulados)
        
        self.df_acumulados_total = acumulado_total(df_acumulados_filtrado)
        self.df_acumulados_total = self.df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = self.df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in self.df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in self.df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())
            

    def mostrar_acumulados_totales(self):
        tk.Label(self.info_frame, text="Acumulados totales:", font=("Arial", 10, "bold")).pack(pady=5)

        # Crear un Frame para contener tanto el Treeview como el botón
        frame_contenedor = tk.Frame(self.info_frame)
        frame_contenedor.pack(fill="both", expand=True)

        # Crear un Frame para el botón
        frame_boton = tk.Frame(frame_contenedor)
        frame_boton.pack(side="left")

        # Crear un botón en el frame_boton
        copiar_btn = tk.Button(frame_boton, text="Copiar", command=self.copiar_tabla_al_portapapeles_acumulado_total)
        copiar_btn.pack(side="left")
        
        # Crear un Frame para la tabla (Treeview)
        frame_tabla_acumulado_total = tk.Frame(frame_contenedor)
        frame_tabla_acumulado_total.pack(side="right", fill="both", expand=True, padx= 10)


        # Crear un Treeview con columnas dinámicas
        self.tabla_acumulado_total = ttk.Treeview(frame_tabla_acumulado_total, show="headings", height=1)
        
        df_acumulados_diarios_traducido = traducir_columnas_lugar_a_id(self.df_config, self.df_acumulados_diarios)
        
        if self.checkbox_inicio:
            pluv_validos = self.pluvio_validos.copy()
            pluv_validos.append("INUMET")
            df_acumulados_filtrado = df_acumulados_diarios_traducido[pluv_validos]
        else:   
            # Agregar columnas
            df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(df_acumulados_diarios_traducido)
            
        df_acumulados_total = acumulado_diarios_total(df_acumulados_filtrado)
        df_acumulados_total = acumulado_total(df_acumulados_total)
            
        
        df_acumulados_total = df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())

        # Crear un Scrollbar horizontal
        scrollbar = tk.Scrollbar(frame_tabla_acumulado_total, orient="horizontal", command=self.tabla_acumulado_total.xview)
        self.tabla_acumulado_total.config(xscrollcommand=scrollbar.set)
        scrollbar.pack(side="bottom", fill="x")

        # Crear un Scrollbar vertical (opcional, si hay muchas filas)
        scrollbar_vertical = tk.Scrollbar(frame_tabla_acumulado_total, orient="vertical", command=self.tabla_acumulado_total.yview)
        self.tabla_acumulado_total.config(yscrollcommand=scrollbar_vertical.set)
        scrollbar_vertical.pack(side="right", fill="y")

        # Empaquetar el Treeview
        self.tabla_acumulado_total.pack(fill="both", expand=True)

    def actualizar_acumulado_total(self):
        # Elimina todos los elementos existentes
        for item in self.tabla_acumulado_total.get_children():
            self.tabla_acumulado_total.delete(item)
            
        df_acumulados_diarios_traducido = traducir_columnas_lugar_a_id(self.df_config, self.df_acumulados_diarios)
        df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(df_acumulados_diarios_traducido)

        df_acumulados_total = acumulado_diarios_total(df_acumulados_filtrado)

        df_acumulados_total = acumulado_total(df_acumulados_total)
        df_acumulados_total = df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())
