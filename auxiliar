    def mostrar_acumulados_totales(self):
        tk.Label(self.info_frame, text="Acumulados totales:", font=("Arial", 10, "bold")).pack(pady=5)

        # Crear un Frame para contener tanto el Treeview como el botón
        frame_contenedor = tk.Frame(self.info_frame)
        frame_contenedor.pack(fill="both", expand=True)

        # Crear un Frame para el botón
        frame_boton = tk.Frame(frame_contenedor)
        frame_boton.pack(side="left")

        # Crear un botón en el frame_boton
        copiar_btn = tk.Button(frame_boton, text="Copiar", command=self.copiar_tabla_acumulado_al_portapapeles)
        copiar_btn.pack(side="left")
        
        # Crear un Frame para la tabla (Treeview)
        frame_tabla_acumulado_total = tk.Frame(frame_contenedor)
        frame_tabla_acumulado_total.pack(side="right", fill="both", expand=True, padx=10)
        
        # Crear un Treeview con columnas dinámicas
        self.tabla_acumulado_total = ttk.Treeview(frame_tabla_acumulado_total, show="headings", height=1)
        
        if self.checkbox_inicio:
            df_acumulados_filtrado = self.df_acumulados[self.pluvio_validos]
        else:   
            # Agregar columnas
            df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(self.df_acumulados)
        
        self.df_acumulados_total = acumulado_total(df_acumulados_filtrado)
        self.df_acumulados_total = self.df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = self.df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in self.df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in self.df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())

        # Crear un Scrollbar horizontal
        scrollbar = tk.Scrollbar(frame_tabla_acumulado_total, orient="horizontal", command=self.tabla_acumulado_total.xview)
        self.tabla_acumulado_total.config(xscrollcommand=scrollbar.set)
        scrollbar.pack(side="bottom", fill="x")

        # Crear un Scrollbar vertical (opcional, si hay muchas filas)
        scrollbar_vertical = tk.Scrollbar(frame_tabla_acumulado_total, orient="vertical", command=self.tabla_acumulado_total.yview)
        self.tabla_acumulado_total.config(yscrollcommand=scrollbar_vertical.set)
        scrollbar_vertical.pack(side="right", fill="y")

        # Empaquetar el Treeview
        self.tabla_acumulado_total.pack(fill="both", expand=True)

    def actualizar_acumulado_total(self):
        # Elimina todos los elementos existentes
        for item in self.tabla_acumulado_total.get_children():
            self.tabla_acumulado_total.delete(item)
        df_acumulados_filtrado = self.filtrar_pluvios_seleccionados(self.df_acumulados)
        
        self.df_acumulados_total = acumulado_total(df_acumulados_filtrado)
        self.df_acumulados_total = self.df_acumulados_total.round(1)
        
        self.tabla_acumulado_total["columns"] = self.df_acumulados_total.columns.tolist()
        
        # Configurar los encabezados de las columnas
        for col in self.df_acumulados_total.columns:
            self.tabla_acumulado_total.heading(col, text=col)
            self.tabla_acumulado_total.column(col, width=50, anchor="center")  # Ajustar ancho y alineación

        # Insertar los datos
        for i, row in self.df_acumulados_total.iterrows():
            self.tabla_acumulado_total.insert("", "end", values=row.tolist())
         